/**
 * @fileoverview gRPC-Web generated client stub for qreeket
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.15.8
// source: group_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as google_protobuf_wrappers_pb from 'google-protobuf/google/protobuf/wrappers_pb';
import * as group_pb from './group_pb';


export class GroupChannelServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorcreateChannel = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/createChannel',
    grpcWeb.MethodType.UNARY,
    group_pb.CreateChannelRequest,
    group_pb.Channel,
    (request: group_pb.CreateChannelRequest) => {
      return request.serializeBinary();
    },
    group_pb.Channel.deserializeBinary
  );

  createChannel(
    request: group_pb.CreateChannelRequest,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.Channel>;

  createChannel(
    request: group_pb.CreateChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.Channel) => void): grpcWeb.ClientReadableStream<group_pb.Channel>;

  createChannel(
    request: group_pb.CreateChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.Channel) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/createChannel',
        request,
        metadata || {},
        this.methodDescriptorcreateChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/createChannel',
    request,
    metadata || {},
    this.methodDescriptorcreateChannel);
  }

  methodDescriptorgetChannel = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/getChannel',
    grpcWeb.MethodType.UNARY,
    google_protobuf_wrappers_pb.StringValue,
    group_pb.Channel,
    (request: google_protobuf_wrappers_pb.StringValue) => {
      return request.serializeBinary();
    },
    group_pb.Channel.deserializeBinary
  );

  getChannel(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.Channel>;

  getChannel(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.Channel) => void): grpcWeb.ClientReadableStream<group_pb.Channel>;

  getChannel(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.Channel) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/getChannel',
        request,
        metadata || {},
        this.methodDescriptorgetChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/getChannel',
    request,
    metadata || {},
    this.methodDescriptorgetChannel);
  }

  methodDescriptorgetChannelsForGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/getChannelsForGroup',
    grpcWeb.MethodType.SERVER_STREAMING,
    google_protobuf_wrappers_pb.StringValue,
    group_pb.ChannelList,
    (request: google_protobuf_wrappers_pb.StringValue) => {
      return request.serializeBinary();
    },
    group_pb.ChannelList.deserializeBinary
  );

  getChannelsForGroup(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<group_pb.ChannelList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/qreeket.GroupChannelService/getChannelsForGroup',
      request,
      metadata || {},
      this.methodDescriptorgetChannelsForGroup);
  }

  methodDescriptorupdateChannel = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/updateChannel',
    grpcWeb.MethodType.UNARY,
    group_pb.Channel,
    group_pb.Channel,
    (request: group_pb.Channel) => {
      return request.serializeBinary();
    },
    group_pb.Channel.deserializeBinary
  );

  updateChannel(
    request: group_pb.Channel,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.Channel>;

  updateChannel(
    request: group_pb.Channel,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.Channel) => void): grpcWeb.ClientReadableStream<group_pb.Channel>;

  updateChannel(
    request: group_pb.Channel,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.Channel) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/updateChannel',
        request,
        metadata || {},
        this.methodDescriptorupdateChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/updateChannel',
    request,
    metadata || {},
    this.methodDescriptorupdateChannel);
  }

  methodDescriptordeleteChannel = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/deleteChannel',
    grpcWeb.MethodType.UNARY,
    google_protobuf_wrappers_pb.StringValue,
    google_protobuf_empty_pb.Empty,
    (request: google_protobuf_wrappers_pb.StringValue) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteChannel(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteChannel(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteChannel(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/deleteChannel',
        request,
        metadata || {},
        this.methodDescriptordeleteChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/deleteChannel',
    request,
    metadata || {},
    this.methodDescriptordeleteChannel);
  }

  methodDescriptorleaveChannel = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/leaveChannel',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageGroupOrChannel,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageGroupOrChannel) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  leaveChannel(
    request: group_pb.ManageGroupOrChannel,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  leaveChannel(
    request: group_pb.ManageGroupOrChannel,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  leaveChannel(
    request: group_pb.ManageGroupOrChannel,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/leaveChannel',
        request,
        metadata || {},
        this.methodDescriptorleaveChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/leaveChannel',
    request,
    metadata || {},
    this.methodDescriptorleaveChannel);
  }

  methodDescriptorsubscribeToChannel = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/subscribeToChannel',
    grpcWeb.MethodType.UNARY,
    group_pb.ChannelSubscriptionRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ChannelSubscriptionRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  subscribeToChannel(
    request: group_pb.ChannelSubscriptionRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  subscribeToChannel(
    request: group_pb.ChannelSubscriptionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  subscribeToChannel(
    request: group_pb.ChannelSubscriptionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/subscribeToChannel',
        request,
        metadata || {},
        this.methodDescriptorsubscribeToChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/subscribeToChannel',
    request,
    metadata || {},
    this.methodDescriptorsubscribeToChannel);
  }

  methodDescriptorunsubscribeFromChannel = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/unsubscribeFromChannel',
    grpcWeb.MethodType.UNARY,
    group_pb.ChannelSubscriptionRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ChannelSubscriptionRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unsubscribeFromChannel(
    request: group_pb.ChannelSubscriptionRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unsubscribeFromChannel(
    request: group_pb.ChannelSubscriptionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unsubscribeFromChannel(
    request: group_pb.ChannelSubscriptionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/unsubscribeFromChannel',
        request,
        metadata || {},
        this.methodDescriptorunsubscribeFromChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/unsubscribeFromChannel',
    request,
    metadata || {},
    this.methodDescriptorunsubscribeFromChannel);
  }

  methodDescriptormanageChannelSubscription = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/manageChannelSubscription',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageChannelSubscriptionRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageChannelSubscriptionRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  manageChannelSubscription(
    request: group_pb.ManageChannelSubscriptionRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  manageChannelSubscription(
    request: group_pb.ManageChannelSubscriptionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  manageChannelSubscription(
    request: group_pb.ManageChannelSubscriptionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/manageChannelSubscription',
        request,
        metadata || {},
        this.methodDescriptormanageChannelSubscription,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/manageChannelSubscription',
    request,
    metadata || {},
    this.methodDescriptormanageChannelSubscription);
  }

  methodDescriptorgetChannelSubscriptionsForUser = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/getChannelSubscriptionsForUser',
    grpcWeb.MethodType.SERVER_STREAMING,
    google_protobuf_wrappers_pb.StringValue,
    group_pb.ChannelSubscriptionList,
    (request: google_protobuf_wrappers_pb.StringValue) => {
      return request.serializeBinary();
    },
    group_pb.ChannelSubscriptionList.deserializeBinary
  );

  getChannelSubscriptionsForUser(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<group_pb.ChannelSubscriptionList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/qreeket.GroupChannelService/getChannelSubscriptionsForUser',
      request,
      metadata || {},
      this.methodDescriptorgetChannelSubscriptionsForUser);
  }

  methodDescriptormuteChannel = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/muteChannel',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageGroupOrChannelRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageGroupOrChannelRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  muteChannel(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  muteChannel(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  muteChannel(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/muteChannel',
        request,
        metadata || {},
        this.methodDescriptormuteChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/muteChannel',
    request,
    metadata || {},
    this.methodDescriptormuteChannel);
  }

  methodDescriptorunmuteChannel = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/unmuteChannel',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageGroupOrChannelRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageGroupOrChannelRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unmuteChannel(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unmuteChannel(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unmuteChannel(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/unmuteChannel',
        request,
        metadata || {},
        this.methodDescriptorunmuteChannel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/unmuteChannel',
    request,
    metadata || {},
    this.methodDescriptorunmuteChannel);
  }

  methodDescriptorcreateGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/createGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.CreateGroupRequest,
    group_pb.Group,
    (request: group_pb.CreateGroupRequest) => {
      return request.serializeBinary();
    },
    group_pb.Group.deserializeBinary
  );

  createGroup(
    request: group_pb.CreateGroupRequest,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.Group>;

  createGroup(
    request: group_pb.CreateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.Group) => void): grpcWeb.ClientReadableStream<group_pb.Group>;

  createGroup(
    request: group_pb.CreateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.Group) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/createGroup',
        request,
        metadata || {},
        this.methodDescriptorcreateGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/createGroup',
    request,
    metadata || {},
    this.methodDescriptorcreateGroup);
  }

  methodDescriptorgetGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/getGroup',
    grpcWeb.MethodType.UNARY,
    google_protobuf_wrappers_pb.StringValue,
    group_pb.Group,
    (request: google_protobuf_wrappers_pb.StringValue) => {
      return request.serializeBinary();
    },
    group_pb.Group.deserializeBinary
  );

  getGroup(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.Group>;

  getGroup(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.Group) => void): grpcWeb.ClientReadableStream<group_pb.Group>;

  getGroup(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.Group) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/getGroup',
        request,
        metadata || {},
        this.methodDescriptorgetGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/getGroup',
    request,
    metadata || {},
    this.methodDescriptorgetGroup);
  }

  methodDescriptorgetGroups = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/getGroups',
    grpcWeb.MethodType.SERVER_STREAMING,
    google_protobuf_wrappers_pb.StringValue,
    group_pb.GroupList,
    (request: google_protobuf_wrappers_pb.StringValue) => {
      return request.serializeBinary();
    },
    group_pb.GroupList.deserializeBinary
  );

  getGroups(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<group_pb.GroupList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/qreeket.GroupChannelService/getGroups',
      request,
      metadata || {},
      this.methodDescriptorgetGroups);
  }

  methodDescriptorupdateGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/updateGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.Group,
    group_pb.Group,
    (request: group_pb.Group) => {
      return request.serializeBinary();
    },
    group_pb.Group.deserializeBinary
  );

  updateGroup(
    request: group_pb.Group,
    metadata: grpcWeb.Metadata | null): Promise<group_pb.Group>;

  updateGroup(
    request: group_pb.Group,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: group_pb.Group) => void): grpcWeb.ClientReadableStream<group_pb.Group>;

  updateGroup(
    request: group_pb.Group,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: group_pb.Group) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/updateGroup',
        request,
        metadata || {},
        this.methodDescriptorupdateGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/updateGroup',
    request,
    metadata || {},
    this.methodDescriptorupdateGroup);
  }

  methodDescriptordeleteGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/deleteGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.DeleteGroupRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.DeleteGroupRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteGroup(
    request: group_pb.DeleteGroupRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteGroup(
    request: group_pb.DeleteGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteGroup(
    request: group_pb.DeleteGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/deleteGroup',
        request,
        metadata || {},
        this.methodDescriptordeleteGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/deleteGroup',
    request,
    metadata || {},
    this.methodDescriptordeleteGroup);
  }

  methodDescriptorleaveGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/leaveGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageGroupOrChannel,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageGroupOrChannel) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  leaveGroup(
    request: group_pb.ManageGroupOrChannel,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  leaveGroup(
    request: group_pb.ManageGroupOrChannel,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  leaveGroup(
    request: group_pb.ManageGroupOrChannel,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/leaveGroup',
        request,
        metadata || {},
        this.methodDescriptorleaveGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/leaveGroup',
    request,
    metadata || {},
    this.methodDescriptorleaveGroup);
  }

  methodDescriptorinviteToGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/inviteToGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.GroupInviteRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.GroupInviteRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  inviteToGroup(
    request: group_pb.GroupInviteRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  inviteToGroup(
    request: group_pb.GroupInviteRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  inviteToGroup(
    request: group_pb.GroupInviteRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/inviteToGroup',
        request,
        metadata || {},
        this.methodDescriptorinviteToGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/inviteToGroup',
    request,
    metadata || {},
    this.methodDescriptorinviteToGroup);
  }

  methodDescriptorgetGroupInvitesForUser = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/getGroupInvitesForUser',
    grpcWeb.MethodType.SERVER_STREAMING,
    google_protobuf_wrappers_pb.StringValue,
    group_pb.GroupInviteList,
    (request: google_protobuf_wrappers_pb.StringValue) => {
      return request.serializeBinary();
    },
    group_pb.GroupInviteList.deserializeBinary
  );

  getGroupInvitesForUser(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<group_pb.GroupInviteList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/qreeket.GroupChannelService/getGroupInvitesForUser',
      request,
      metadata || {},
      this.methodDescriptorgetGroupInvitesForUser);
  }

  methodDescriptorgetGroupInvitesForGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/getGroupInvitesForGroup',
    grpcWeb.MethodType.SERVER_STREAMING,
    google_protobuf_wrappers_pb.StringValue,
    group_pb.GroupInviteList,
    (request: google_protobuf_wrappers_pb.StringValue) => {
      return request.serializeBinary();
    },
    group_pb.GroupInviteList.deserializeBinary
  );

  getGroupInvitesForGroup(
    request: google_protobuf_wrappers_pb.StringValue,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<group_pb.GroupInviteList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/qreeket.GroupChannelService/getGroupInvitesForGroup',
      request,
      metadata || {},
      this.methodDescriptorgetGroupInvitesForGroup);
  }

  methodDescriptorrevokeGroupInvite = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/revokeGroupInvite',
    grpcWeb.MethodType.UNARY,
    group_pb.RevokeGroupInviteRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.RevokeGroupInviteRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  revokeGroupInvite(
    request: group_pb.RevokeGroupInviteRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  revokeGroupInvite(
    request: group_pb.RevokeGroupInviteRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  revokeGroupInvite(
    request: group_pb.RevokeGroupInviteRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/revokeGroupInvite',
        request,
        metadata || {},
        this.methodDescriptorrevokeGroupInvite,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/revokeGroupInvite',
    request,
    metadata || {},
    this.methodDescriptorrevokeGroupInvite);
  }

  methodDescriptormanageGroupInvite = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/manageGroupInvite',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageGroupInviteRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageGroupInviteRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  manageGroupInvite(
    request: group_pb.ManageGroupInviteRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  manageGroupInvite(
    request: group_pb.ManageGroupInviteRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  manageGroupInvite(
    request: group_pb.ManageGroupInviteRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/manageGroupInvite',
        request,
        metadata || {},
        this.methodDescriptormanageGroupInvite,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/manageGroupInvite',
    request,
    metadata || {},
    this.methodDescriptormanageGroupInvite);
  }

  methodDescriptormuteGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/muteGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageGroupOrChannelRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageGroupOrChannelRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  muteGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  muteGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  muteGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/muteGroup',
        request,
        metadata || {},
        this.methodDescriptormuteGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/muteGroup',
    request,
    metadata || {},
    this.methodDescriptormuteGroup);
  }

  methodDescriptorunmuteGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/unmuteGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageGroupOrChannelRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageGroupOrChannelRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unmuteGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unmuteGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unmuteGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/unmuteGroup',
        request,
        metadata || {},
        this.methodDescriptorunmuteGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/unmuteGroup',
    request,
    metadata || {},
    this.methodDescriptorunmuteGroup);
  }

  methodDescriptorpromoteGroupAdmin = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/promoteGroupAdmin',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageAdminRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageAdminRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  promoteGroupAdmin(
    request: group_pb.ManageAdminRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  promoteGroupAdmin(
    request: group_pb.ManageAdminRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  promoteGroupAdmin(
    request: group_pb.ManageAdminRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/promoteGroupAdmin',
        request,
        metadata || {},
        this.methodDescriptorpromoteGroupAdmin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/promoteGroupAdmin',
    request,
    metadata || {},
    this.methodDescriptorpromoteGroupAdmin);
  }

  methodDescriptordemoteGroupAdmin = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/demoteGroupAdmin',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageAdminRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageAdminRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  demoteGroupAdmin(
    request: group_pb.ManageAdminRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  demoteGroupAdmin(
    request: group_pb.ManageAdminRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  demoteGroupAdmin(
    request: group_pb.ManageAdminRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/demoteGroupAdmin',
        request,
        metadata || {},
        this.methodDescriptordemoteGroupAdmin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/demoteGroupAdmin',
    request,
    metadata || {},
    this.methodDescriptordemoteGroupAdmin);
  }

  methodDescriptorbanFromGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/banFromGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageGroupOrChannelRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageGroupOrChannelRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  banFromGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  banFromGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  banFromGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/banFromGroup',
        request,
        metadata || {},
        this.methodDescriptorbanFromGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/banFromGroup',
    request,
    metadata || {},
    this.methodDescriptorbanFromGroup);
  }

  methodDescriptorunbanFromGroup = new grpcWeb.MethodDescriptor(
    '/qreeket.GroupChannelService/unbanFromGroup',
    grpcWeb.MethodType.UNARY,
    group_pb.ManageGroupOrChannelRequest,
    google_protobuf_empty_pb.Empty,
    (request: group_pb.ManageGroupOrChannelRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unbanFromGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unbanFromGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unbanFromGroup(
    request: group_pb.ManageGroupOrChannelRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/qreeket.GroupChannelService/unbanFromGroup',
        request,
        metadata || {},
        this.methodDescriptorunbanFromGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/qreeket.GroupChannelService/unbanFromGroup',
    request,
    metadata || {},
    this.methodDescriptorunbanFromGroup);
  }

}

